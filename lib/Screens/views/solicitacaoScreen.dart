import 'dart:async';
import 'dart:typed_data';
import 'package:flutter/services.dart';
import 'package:flutter/material.dart';
import '../homescreen/HomeScreen.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart';
import 'package:connectivity_plus/connectivity_plus.dart';

Uint8List? imageData;
String selectedcode = '';

class FCCApp extends StatefulWidget {
  final String user;
  final String senha;
  const FCCApp({super.key, required this.user, required this.senha});

  @override
  _FCCAppState createState() => _FCCAppState();
}

class _FCCAppState extends State<FCCApp> {
  List<Map<String, dynamic>> rowData = [];
  bool isLoading2 = false;
  bool isImageAvailable = false;
  Map<String, dynamic> selectedrowData = {} ?? {};
  String searchText = '';
  String searchTextminus = '';
  int? selectedIndex;

  bool isLoading = true;
  bool hasError = false;

  ScrollController _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
    fetchData1();
    _scrollController = ScrollController();
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.landscapeRight,
    ]);
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> fetchData1({int page = 1, int limit = 50}) async {
    setState(() {
      isLoading = true;
      hasError = false;
    });

    final url =
        'http://192.168.0.6:80/REST/ipena_insol/SALDPR?page=$page&limit=$limit';
    final username = widget.user;
    final password = widget.senha;
    final basicAuth =
        'Basic ' + base64Encode(utf8.encode('$username:$password'));

    try {
      final response = await http.get(
        Uri.parse(url),
        headers: {'authorization': basicAuth},
      );

      if (response.statusCode == 200) {
        final decodedData = json.decode(response.body);

        setState(() {
          // Clear previous data before loading new data
          if (page == 1) {
            rowData.clear();
          }

          // Append the new data
          rowData.addAll(List<Map<String, dynamic>>.from(
            decodedData["Dados"].map((item) => {
                  "Codigo": item["Codigo"],
                  "Descrição": item["Descricao"],
                  "Unidade": item["Um"],
                  "Almoxarifado": item["Almox"],
                  "Saldo": item["Saldo"].toString(),
                  "Local Imag": item["Local Imag"],
                  "Imagem": item["Imagem"],
                  "Centro de custo": item["Centro de custo"],
                  "Conta Contabil": item["Conta Contabil"],
                }),
          ));
          isLoading = false;
        });
      } else {
        throw Exception('Falha ao carregar os dados');
      }
    } catch (e) {
      setState(() {
        hasError = true;
        isLoading = false;
      });
      print('Erro ao realizar o GET: $e');
    }
  }

  Future<void> fetchDataof() async {
    // Simulação de dados offline
    setState(() {
      isLoading = true;
      hasError = false;
    });

    // Adicionando mais dados no JSON
    final offlineData = json.decode('''{
    "Dados": [
      {
        "Codigo": "PR11231",
        "Descricao": "SENSOR D-J59L9(DC-24V)",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 7,
        "Local Imag": "        ",
        "Imagem": "
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11245",
        "Descricao": "SOQUETE PARA RELE PTF14A+PYC-A1",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 13,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11261",
        "Descricao": "RASPADOR PS-28",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 1,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11271",
        "Descricao": "RETENTOR NOK TC355511",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 5,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11272",
        "Descricao": "RETENTOR DE OLEO AE-2864-A",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 10,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11279",
        "Descricao": "BUCHA DO MANCHAL Ø INTRNO 45 MM ØEXT.62MM",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 2,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11281",
        "Descricao": "ANEL DE VEDACAO V-28A",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 20,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11286",
        "Descricao": "RASPADOR DSI 125",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 19,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11288",
        "Descricao": "ORING AS 568-273",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 3,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11294",
        "Descricao": "ANEL DE VEDACÃO IS 160X190X14",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 3,
        "Local Imag": "        ",
        "Imagem": "                    ",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      },
      {
        "Codigo": "PR11310",
        "Descricao": "SINALIZADOR 22MM XA2-EVB4LC MONOBLOCO 24V CC/CA VERMELHO",
        "Um": "PC",
        "Almox": "03",
        "Saldo": 22,
        "Local Imag": "PR11310",
        "Imagem": "PR11310",
        "Centro de custo": "3070",
        "Conta Contabil": "11308001"
      }
    ]
  }''');

    // Atualiza o estado com os dados simulados
    setState(() {
      rowData = List<Map<String, dynamic>>.from(
        offlineData["Dados"].map((item) => {
              "Codigo": item["Codigo"],
              "Descrição": item["Descricao"],
              "Unidade": item["Um"],
              "Almoxarifado": item["Almox"],
              "Saldo": item["Saldo"].toString(),
              "Local Imag": item["Local Imag"],
              "Imagem": item["Imagem"],
              "Centro de custo": item["Centro de custo"],
              "Conta Contabil": item["Conta Contabil"],
            }),
      );
      hasError = false;
      isLoading = false;
    });
  }

  // Define variables for pagination
  int currentPage = 0;
  final int itemsPerPage = 50;

  List<Map<String, dynamic>> get paginatedData {
    final filteredData = rowData.where((data) {
      return data["Codigo"]!.toLowerCase().contains(searchText) ||
          data["Descrição"]!.toLowerCase().contains(searchText);
    }).toList();

    final startIndex = currentPage * itemsPerPage;
    final endIndex = startIndex + itemsPerPage;

    return filteredData.sublist(
      startIndex,
      endIndex < filteredData.length ? endIndex : filteredData.length,
    );
  }

  List<Map<String, dynamic>> get paginatedDataminus {
    final filteredData = rowData.where((data) {
      return data["Numero Os"]!.toLowerCase().contains(searchTextminus) ||
          data["Status OS"]!.toLowerCase().contains(searchTextminus);
    }).toList();

    final startIndex = currentPage * itemsPerPage;
    final endIndex = startIndex + itemsPerPage;

    return filteredData.sublist(
      startIndex,
      endIndex < filteredData.length ? endIndex : filteredData.length,
    );
  }

  Map<String, List<Map<String, dynamic>>> filteredCache = {};
  Timer? debounce;

  List<Map<String, dynamic>> getFilteredData(String query) {
    if (filteredCache.containsKey(query)) {
      return filteredCache[query]!;
    }

    final filteredData = rowData.where((data) {
      return data["Codigo"]?.toLowerCase().contains(query) ??
          false || data["Descrição"]?.toLowerCase().contains(query) ??
          false;
    }).toList();

    filteredCache[query] = filteredData;
    return filteredData;
  }

// Use this in your build method instead of rowData

  Widget _buildDataRow1(String title) {
    return Container(
      //  width: MediaQuery.of(context).size.width * 0.8,
      // height: MediaQuery.of(context).size.height * 0.6,
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black, width: 1.0),
      ),
      padding: EdgeInsets.all(16.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Text(
                title,
                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: TextField(
                  onChanged: (value) {
                    setState(() {
                      searchText = value.toLowerCase();
                      currentPage = 0; // Reset to the first page on new search
                    });
                  },
                  onSubmitted: (value) {
                    setState(() {
                      searchText = value
                          .toLowerCase(); // Optional: you can keep this if ss
                      currentPage = 0; // Reset to the first page on search
                    });
                  },
                  decoration: InputDecoration(
                    hintText: "Pesquise por código ou descrição",
                    suffixIcon: IconButton(
                      icon: Icon(Icons.search),
                      onPressed: () {
                        setState(() {
                          currentPage =
                              0; // Reset to the first page on new search
                        });
                      },
                    ),
                  ),
                ),
              )
            ],
          ),
          SizedBox(height: 10),
          Table(
            border: TableBorder.all(color: Colors.black),
            columnWidths: const {
              0: FlexColumnWidth(0.5),
              1: FlexColumnWidth(2),
              2: FlexColumnWidth(0.5),
              3: FlexColumnWidth(0.5),
              4: FlexColumnWidth(0.5),
            },
            children: [
              TableRow(
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                ),
                children: const [
                  Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text('Código',
                        style: TextStyle(fontWeight: FontWeight.bold)),
                  ),
                  Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text('Descrição',
                        style: TextStyle(fontWeight: FontWeight.bold)),
                  ),
                  Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text('Centro de Custo',
                        style: TextStyle(fontWeight: FontWeight.bold)),
                  ),
                  Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text('Unidade',
                        style: TextStyle(fontWeight: FontWeight.bold)),
                  ),
                  Padding(
                    padding: EdgeInsets.all(8.0),
                    child: Text('Saldo',
                        style: TextStyle(fontWeight: FontWeight.bold)),
                  ),
                ],
              ),
            ],
          ),
          SizedBox(height: 10),
          Expanded(
            child: SingleChildScrollView(
              child: Table(
                border: TableBorder.all(color: Colors.black),
                columnWidths: const {
                  0: FlexColumnWidth(0.5),
                  1: FlexColumnWidth(2),
                  2: FlexColumnWidth(0.5),
                  3: FlexColumnWidth(0.5),
                  4: FlexColumnWidth(0.5),
                },
                children: paginatedData.map((data) {
                  int index = rowData.indexOf(data);
                  return TableRow(
                    decoration: BoxDecoration(
                      color: selectedIndex == index
                          ? Colors.blue.withOpacity(0.3)
                          : Colors.transparent,
                    ),
                    children: [
                      // Coluna: Código
                      TableCell(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              selectedIndex = index;
                              selectedrowData = data;
                              selectedcode = data["Codigo"];
                              pegarImagemGet();
                            });
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(data["Codigo"] ?? '',
                                style: TextStyle(fontSize: 14)),
                          ),
                        ),
                      ),

                      // Coluna: Descrição
                      TableCell(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              selectedIndex = index;
                              selectedrowData = data;
                              selectedcode = data["Codigo"];
                              pegarImagemGet();
                            });
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(data["Descrição"] ?? '',
                                style: TextStyle(fontSize: 14)),
                          ),
                        ),
                      ),

                      // Coluna: Centro de custo
                      TableCell(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              selectedIndex = index;
                              selectedrowData = data;
                              selectedcode = data["Codigo"];
                              pegarImagemGet();
                            });
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(data["Centro de custo"] ?? '',
                                style: TextStyle(fontSize: 14)),
                          ),
                        ),
                      ),

                      // Coluna: Unidade
                      TableCell(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              selectedIndex = index;
                              selectedrowData = data;
                              selectedcode = data["Codigo"];
                              pegarImagemGet();
                            });
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(data["Unidade"] ?? '',
                                style: TextStyle(fontSize: 14)),
                          ),
                        ),
                      ),

                      // Coluna: Saldo
                      TableCell(
                        child: InkWell(
                          onTap: () {
                            setState(() {
                              selectedIndex = index;
                              selectedrowData = data;
                              selectedcode = data["Codigo"];
                              pegarImagemGet();
                            });
                          },
                          child: Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Text(data["Saldo"] ?? '',
                                style: TextStyle(fontSize: 14)),
                          ),
                        ),
                      ),
                    ],
                  );
                }).toList(),
              ),
            ),
          ),
          // Load more button
          // if (isLoading)
          //   Center(child: CircularProgressIndicator()) // Show loading indicator
          // else
          //   TextButton(
          //     onPressed: () {
          //       if (paginatedData.length == itemsPerPage) {
          //         setState(() {
          //           currentPage++;
          //           fetchData1(page: currentPage); // Load more data
          //         });
          //       }
          //     },
          //     child: Text('Load More'),
          //   ),
        ],
      ),
    );
  }

  Future<bool> _showConfirmationDialog(
      BuildContext context, String message) async {
    return await showDialog<bool>(
          context: context,
          barrierDismissible: false,
          builder: (BuildContext context) {
            return AlertDialog(
              title: const Text('Confirmação'),
              content: Text(message),
              actions: [
                TextButton(
                  onPressed: () => Navigator.of(context).pop(false),
                  child: const Text('Cancelar'),
                ),
                ElevatedButton(
                  onPressed: () => Navigator.of(context).pop(true),
                  child: const Text('Confirmar'),
                ),
              ],
            );
          },
        ) ??
        false; // Retorna false se o usuário fechar o diálogo sem escolher
  }

  void _showLoadingDialog(BuildContext context, String message) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return AlertDialog(
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              CircularProgressIndicator(),
              SizedBox(height: 16),
              Text(message),
            ],
          ),
        );
      },
    );
  }

  void _showAlertDialogSus(
      BuildContext context, String title, String message, Color color) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            title,
            style: TextStyle(color: color),
          ),
          content: Text(message),
          actions: [
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  void _showAlertDialog(
      BuildContext context, String title, String message, Color color) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            title,
            style: TextStyle(color: color),
          ),
          content: Text(message),
          actions: [
            ElevatedButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text('OK'),
            ),
          ],
        );
      },
    );
  }

  NumberFormat formatter = NumberFormat("00");
  int nextItemCounter = 0;

  List<Map<String, dynamic>> camposAdd = [];
  Widget _buildDataRow2(String title) {
    return SingleChildScrollView(
      child: Column(
        children: [
          Container(
            // height: MediaQuery.of(context).size.width * 0.6,
            // width: MediaQuery.of(context).size.width * 0.4,
            constraints: BoxConstraints(minHeight: 130, maxHeight: 600),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.black, width: 1.0),
            ),
            padding: EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Text(
                      "$title",
                      style: const TextStyle(
                          fontSize: 13, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(width: 1),
                    // Botão de adicionar item
                    TextButton.icon(
                      label: const Text(
                        'Adicionar Item',
                        style: TextStyle(color: Colors.green),
                      ),
                      onPressed: () {
                        setState(() {
                          if (selectedrowData.isNotEmpty) {
                            // Obtém a descrição do item que está sendo adicionado
                            String descricao =
                                selectedrowData['Descrição'] ?? '';

                            // Verifica se já existe um item com a mesma descrição na lista 'camposAdd'
                            bool exists = camposAdd
                                .any((item) => item['descricao'] == descricao);

                            nextItemCounter = camposAdd.length + 1;

                            // Se o item não existir, adiciona; caso contrário, exibe uma mensagem ou realiza outra ação
                            if (!exists) {
                              camposAdd.add({
                                'item': formatter
                                    .format(nextItemCounter)
                                    .toString(),
                                'codigo':
                                    selectedrowData['Codigo'] ?? 'Sem código',
                                'descricao': descricao,
                                'tipo': selectedrowData['Tipo'] ?? '',
                                'unidade': selectedrowData['Unidade'] ?? '',
                                'saldo': selectedrowData['Saldo'] ?? '',
                                'centro de custo':
                                    selectedrowData['Centro de custo'] ?? '',
                                'Imagem': selectedrowData['Imagem'] ?? '',
                                'Almox': selectedrowData['Almoxarifado'] ?? '',
                                'qtd': '',
                                'NumOs': '',
                              });
                            } else {
                              // Exibe uma mensagem informando que o item já foi adicionado
                              ScaffoldMessenger.of(context).showSnackBar(
                                const SnackBar(
                                  content: Text(
                                      'Item já foi adicionado. Selecione outro.'),
                                ),
                              );
                            }
                            WidgetsBinding.instance.addPostFrameCallback((_) {
                              _scrollController.animateTo(
                                _scrollController.position.maxScrollExtent,
                                duration: Duration(milliseconds: 300),
                                curve: Curves.easeOut,
                              );
                            });
                          }
                        });
                      },
                    ),
                    // Botão de cancelar todas as adições
                    TextButton.icon(
                      label: const Text(
                        'Cancelar',
                        style: TextStyle(color: Colors.red),
                      ),
                      onPressed: () {
                        setState(() {
                          camposAdd.clear(); // Cancela todas as adições
                          isImageAvailable = false;
                        });
                        isImageAvailable = false;
                      },
                    ),
                    // Botão para solicitar envio
                    TextButton.icon(
                      icon: const Icon(Icons.send,
                          color: Colors.blueAccent, size: 12),
                      label: const Text(
                        'Solicitar',
                        style: TextStyle(color: Colors.blueAccent),
                      ),
                      onPressed: (camposAdd
                                  .any((campo) => campo['isInvalid'] == true) ||
                              !camposAdd.any(
                                  (campo) => campo.containsKey('isInvalid')) ||
                              (camposAdd.any((campo) => campo['qtd'] == '')))
                          ? null
                          : () async {
                              // Verifica se há algum item com código iniciando com PR e sem NumOs
                              final prInvalido = camposAdd.any((campo) {
                                final codigo =
                                    campo['codigo']?.toString() ?? '';
                                final numOs = campo['NumOs']?.toString() ?? '';
                                return codigo.startsWith('PR') && numOs.isEmpty;
                              });

                              if (prInvalido) {
                                await showDialog(
                                  context: context,
                                  builder: (_) => AlertDialog(
                                    title: Text('Número da OS obrigatório'),
                                    content: Text(
                                        'Para itens com código iniciando com "PR", é obrigatório informar o número da OS.'),
                                    actions: [
                                      TextButton(
                                        onPressed: () => Navigator.pop(context),
                                        child: Text('OK'),
                                      ),
                                    ],
                                  ),
                                );
                                return; // Impede o envio
                              }

                              // Mostra o alerta de confirmação normalmente
                              bool confirm = await _showConfirmationDialog(
                                context,
                                'Deseja enviar os dados?',
                              );

                              if (confirm) {
                                _showLoadingDialog(
                                    context, 'Enviando dados...');
                                try {
                                  await postData2();
                                } catch (error) {
                                  // lidar com erro se necessário
                                }
                              }

                              print('Campos adicionados: $camposAdd');
                            },
                    ),
                  ],
                ),

                SizedBox(height: 10),

                // Campo de imagem mantido

                // Tabela que exibe os campos adicionados
                Table(
                  border: TableBorder.all(color: Colors.black),
                  columnWidths: const {
                    0: FlexColumnWidth(0.25),
                    1: FlexColumnWidth(0.4),
                    2: FlexColumnWidth(0.4),
                    3: FlexColumnWidth(0.5),
                    4: FlexColumnWidth(0.9),
                  },
                  children: [
                    TableRow(
                      decoration: BoxDecoration(
                        color: Colors.grey[300],
                      ),
                      children: const [
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('Item',
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 12)),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('Código',
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 12)),
                        ),
                        // Padding(
                        //   padding: EdgeInsets.all(8.0),
                        //   child: Text('Descrição',
                        //       style: TextStyle(
                        //           fontWeight: FontWeight.bold, fontSize: 12)),
                        // ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('Centro de Custo',
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 12)),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('Num Os',
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 12)),
                        ),
                        Padding(
                          padding: EdgeInsets.all(8.0),
                          child: Text('Quantidade',
                              style: TextStyle(
                                  fontWeight: FontWeight.bold, fontSize: 12)),
                        ),
                      ],
                    ),
                  ],
                ),
                SizedBox(height: 10),
                Container(
                  constraints: BoxConstraints(minHeight: 0, maxHeight: 120),
                  width: double.infinity,
                  child: SingleChildScrollView(
                    controller: _scrollController,
                    child: Column(
                      children: [
                        Table(
                          border: TableBorder.all(color: Colors.black),
                          columnWidths: const {
                            0: FlexColumnWidth(0.25),
                            1: FlexColumnWidth(0.4),
                            2: FlexColumnWidth(0.4),
                            3: FlexColumnWidth(0.5),
                            4: FlexColumnWidth(0.9),
                          },
                          children: camposAdd.map((campo) {
                            return TableRow(
                              children: [
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text(
                                      style: TextStyle(fontSize: 10),
                                      campo['item'] ?? ''),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Text(
                                      style: TextStyle(fontSize: 10),
                                      campo['codigo'] ?? ''),
                                ),
                                // Padding(
                                //   padding: const EdgeInsets.all(8.0),
                                //   child: Text(
                                //       style: TextStyle(fontSize: 10),
                                //       campo['descricao'] ?? ''),
                                // ),
                                GestureDetector(
                                  onTap: () {
                                    setState(() {
                                      campo['editando'] = true;
                                    });
                                  },
                                  child: campo['editando'] == true
                                      ? Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Focus(
                                            onFocusChange: (hasFocus) {
                                              if (!hasFocus) {
                                                setState(() {
                                                  campo['editando'] = false;
                                                });
                                              }
                                            },
                                            child: TextField(
                                              autofocus:
                                                  true, // Para focar automaticamente ao clicar
                                              onSubmitted: (value) {
                                                setState(() {
                                                  campo['centro de custo'] =
                                                      value;
                                                  campo['editando'] = false;
                                                });
                                              },
                                              decoration: InputDecoration(
                                                border: OutlineInputBorder(),
                                                isDense: true,
                                                contentPadding:
                                                    EdgeInsets.all(8),
                                              ),
                                              style: TextStyle(fontSize: 10),
                                            ),
                                          ),
                                        )
                                      : Padding(
                                          padding: const EdgeInsets.all(8.0),
                                          child: Text(
                                            campo['centro de custo'] ?? '',
                                            style: TextStyle(fontSize: 10),
                                          ),
                                        ),
                                ),

                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Row(
                                    children: [
                                      Expanded(
                                          child: Text(
                                              style: TextStyle(fontSize: 10),
                                              campo['NumOs'] ?? '')),
                                      IconButton(
                                        onPressed: () async {
                                          final result =
                                              await _showPopupMenu_Osnew(
                                                  context,
                                                  campo['NumOs'] ?? '');
                                          if (result != null) {
                                            setState(() {
                                              campo['NumOs'] = result;
                                            });
                                          }
                                        },
                                        icon: Icon(
                                          Icons.search,
                                          color: (campo['NumOs'] != null &&
                                                  campo['NumOs']
                                                      .toString()
                                                      .isNotEmpty)
                                              ? Colors.blue
                                              : Colors.black,
                                        ),
                                        tooltip: (campo['NumOs'] != null &&
                                                campo['NumOs']
                                                    .toString()
                                                    .isNotEmpty)
                                            ? campo['NumOs'].toString()
                                            : 'Pesquise a OS',
                                      ),
                                    ],
                                  ),
                                ),
                                Padding(
                                  padding: const EdgeInsets.all(8.0),
                                  child: Row(
                                    children: [
                                      Expanded(
                                        child: TextField(
                                          inputFormatters: [
                                            FilteringTextInputFormatter
                                                .digitsOnly
                                          ],
                                          keyboardType: TextInputType
                                              .number, // Garante entrada numérica
                                          onChanged: (value) {
                                            setState(() {
                                              campo['qtd'] = value;
                                              campo['isInvalid'] =
                                                  (double.tryParse(value) !=
                                                          null &&
                                                      double.parse(value) <= 0);
                                            });
                                          },
                                          decoration: InputDecoration(
                                            border: OutlineInputBorder(),
                                            hintText: 'Digite a quantidade',
                                            errorText:
                                                campo['isInvalid'] == true
                                                    ? 'Valor Invalido'
                                                    : null, // Mensagem de erro
                                            errorBorder: OutlineInputBorder(
                                              borderSide: BorderSide(
                                                  color: Colors.red, width: 2),
                                            ),
                                            focusedBorder: OutlineInputBorder(
                                              borderSide: BorderSide(
                                                color:
                                                    campo['isInvalid'] == true
                                                        ? Colors.red
                                                        : Colors.blue,
                                                width: 2,
                                              ),
                                            ),
                                          ),
                                        ),
                                      ),
                                      IconButton(
                                        icon: Icon(Icons.delete,
                                            color: Colors.red),
                                        onPressed: () {
                                          setState(() {
                                            camposAdd.remove(campo);

                                            for (int i = 0;
                                                i < camposAdd.length;
                                                i++) {
                                              camposAdd[i]['item'] =
                                                  formatter.format(i + 1);
                                            }

                                            // Atualiza o contador com a nova quantidade de itens
                                            nextItemCounter = camposAdd.length;
                                          });
                                        },
                                      ),
                                    ],
                                  ),
                                ),
                              ],
                            );
                          }).toList(),
                        ),
                      ],
                    ),
                  ),
                ),

                SizedBox(height: 10),

                Container(
                  width: MediaQuery.of(context).size.width * 0.4,
                  height: MediaQuery.of(context).size.height * 0.24,
                  decoration: BoxDecoration(
                    border: Border.all(color: Colors.black, width: 1.0),
                  ),
                  child: isLoading2
                      ? Center(child: CircularProgressIndicator())
                      : isImageAvailable
                          ? Image.memory(imageBytes!)
                          : Center(child: Text('Imagem não disponível')),
                ),

                SizedBox(height: 10),
              ],
            ),
          ),
          SizedBox(
            height: 20,
          ),

          // Botões de ação
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [],
          )
        ],
      ),
    );
  }

  String sucessomessage = '';
  String errormessage = '';
  Map<String, Object> jsoncorpo = {};
  Future<void> postData2() async {
    final url = 'http://192.168.0.6:80/REST/ipena_insol/CRIASA';
    final username = widget.user;
    final password = widget.senha;
    final basicAuth =
        'Basic ' + base64Encode(utf8.encode('$username:$password'));
    camposAdd;
    final body = {
      "CP_NUM": "",
      "CP_EMISSAO": "",
      "CP_SOLICIT": "",
      "CRIASA": camposAdd.map((campo) {
        return {
          "item": campo['item'] ?? '',
          "Codigo": campo['codigo'] ?? '',
          "Descricao": campo['descricao'] ?? '',
          "Um": campo['unidade'] ?? '',
          "qtd": int.tryParse(campo['qtd'] ?? '0') ?? 0,
          "NumOs": campo['NumOs'],
          "Conta Contabil": campo['conta contabil'] ?? '',
          "Centro de Custo": (campo['centro de custo'] ?? '').toString(),
          "Almox": campo['Almox'] ?? '',
          "Obs": campo['obs'] ?? '',
        };
      }).toList(),
    };

    print(jsonEncode(body));
    jsoncorpo = body;

    try {
      final response = await http
          .post(
            Uri.parse(url),
            headers: {
              'Content-Type': 'application/json',
              'Authorization': basicAuth,
            },
            body: jsonEncode(body),
          )
          .timeout(Duration(seconds: 10)); // Timeout de 10 segundos

      if (response.statusCode >= 200 && response.statusCode <= 299) {
        isImageAvailable = false;
        setState(() {
          Navigator.of(context).pop();
          camposAdd.clear();
          isImageAvailable = false;

          final Map<String, dynamic> responseBody = jsonDecode(response.body);
          sucessomessage = responseBody['note'] ?? 'Erro desconhecido';

          _showAlertDialogSus(
            context,
            'Sucesso',
            'Dados enviados com sucesso! $sucessomessage',
            Colors.green,
          );
        });
      } else {
        _handleError();
      }
    } on TimeoutException {
      _handleError('Erro na inclusão do registro. Tente novamente.');
    } catch (e) {
      _handleError('Erro inesperado: $e');
    }
  }

  void _handleError([String message = 'Erro na inclusão do registro']) {
    isImageAvailable = false;
    Navigator.of(context).pop();

    _showAlertDialogSus(
      context,
      'Aviso',
      message,
      Colors.red,
    );

    setState(() {
      camposAdd.clear();
    });
  }

  Future<void> fetchDataimg() async {
    final apiUrl = 'https://picsum.photos/200/300';
    print(selectedcode);
    try {
      final response = await http.get(
        Uri.parse(apiUrl),
      );

      if (response.statusCode == 200) {
        print('ok');
        imageData = response.bodyBytes;
      } else {}
    } catch (e) {}
  }

  List<Map<String, dynamic>> ordensDeServico = [];

  Future<List<Map<String, dynamic>>> fetchDaOsOffline() async {
    // Simula um tempo de espera, se necessário
    await Future.delayed(const Duration(milliseconds: 500));

    const jsonString = '''
  {
    "Dados": [
      {
        "Numero Os": "019942",
        "Data Emissao": "31/12/2000",
        "Status OS": "A",
        "Emitente OS": "VITOR MONTEIRO RODRIGUES"
      },
      {
        "Numero Os": "019925",
        "Data Emissao": "31/01/2020",
        "Status OS": "A",
        "Emitente OS": "BRUNA KELLEN PEDROSA GOMES"
      },
      {
        "Numero Os": "019997",
        "Data Emissao": "03/02/2020",
        "Status OS": "A",
        "Emitente OS": "ALEXANDRO OKI GRACA"
      }
    ]
  }
  ''';

    final Map<String, dynamic> data = json.decode(jsonString);
    final List<dynamic> dados = data['Dados'];
    return List<Map<String, dynamic>>.from(dados);
  }

  Future<List<Map<String, dynamic>>> fetchDaOs() async {
    final username = widget.user;
    final password = widget.senha;
    final basicAuth =
        'Basic ' + base64Encode(utf8.encode('$username:$password'));

    final url = 'http://192.168.0.6:80/REST/ipena_insol/BUSCAOS';

    try {
      final response = await http.get(
        Uri.parse(url),
        headers: {'Authorization': basicAuth},
      );

      List<Map<String, dynamic>> itemsList = [];

      if (response.statusCode == 200) {
        final Map<String, dynamic> data = json.decode(response.body);
        itemsList = List<Map<String, dynamic>>.from(data['Dados']);
        setState(() {
          ordensDeServico = itemsList;
        });
        return List<Map<String, dynamic>>.from(data['Dados']);
      } else {
        print('errodasdasdasdasdr');
        Navigator.of(context).pop();
        throw [];
      }
    } catch (error) {
      print('Error: $error');
      Navigator.of(context).pop();
      return [];
      // Return an empty list in case of an error
    }
  }

  Future<String?> _showPopupMenu_Os(
      BuildContext context, String controller) async {
    final GlobalKey<State> _keyLoader = GlobalKey<State>();

    // Verifica a conexão com a internet
    var connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
      _showErrorDialog(context, "Sem conexão com a internet.");
      return null;
    }

    // Exibe o diálogo de carregamento
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          key: _keyLoader,
          child: Container(
            height: 100,
            padding: const EdgeInsets.all(16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: const [
                CircularProgressIndicator(),
                SizedBox(width: 20),
                Text('Carregando...'),
              ],
            ),
          ),
        );
      },
    );

    try {
      final List<Map<String, dynamic>> items = await fetchDaOs().timeout(
        const Duration(seconds: 18),
        onTimeout: () {
          throw TimeoutException("O tempo limite foi excedido.");
        },
      );

      Navigator.of(_keyLoader.currentContext!, rootNavigator: true)
          .pop(); // Fecha o diálogo de carregamento

      final selected = await showModalBottomSheet<String>(
        context: context,
        isScrollControlled: true,
        builder: (BuildContext context) {
          String searchText = "";
          return StatefulBuilder(
            builder: (context, setState) {
              final List<Map<String, dynamic>> filteredItems =
                  items.where((item) {
                final os = (item['Numero Os']?.toString() ?? "").toLowerCase();
                final emit =
                    (item['Emitente OS']?.toString() ?? "").toLowerCase();
                return os.contains(searchText) || emit.contains(searchText);
              }).toList();

              return SafeArea(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Text(
                        'Selecione a Ordem de Serviço:',
                        style: TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16.0, vertical: 8.0),
                      child: TextField(
                        autofocus: true,
                        decoration: const InputDecoration(
                          hintText: "Pesquise por OS ou Emitente",
                          prefixIcon: Icon(Icons.search),
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (value) {
                          setState(() {
                            searchText = value.toLowerCase();
                          });
                        },
                      ),
                    ),
                    Expanded(
                      child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: filteredItems.length,
                        itemBuilder: (context, index) {
                          final item = filteredItems[index];
                          return ListTile(
                            title: Text(
                                '${item['Numero Os']} : ${item['Emitente OS']} - ${item['Data Emissao']}'),
                            onTap: () {
                              Navigator.of(context)
                                  .pop(item['Numero Os'].toString());
                            },
                          );
                        },
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      );

      if (selected != null) {
        controller = selected;
      }
      return selected;
    } on TimeoutException {
      Navigator.of(_keyLoader.currentContext!, rootNavigator: true).pop();
      _showErrorDialog(
          context, "O tempo limite foi excedido. Tente novamente.");
      return null;
    } catch (error) {
      Navigator.of(_keyLoader.currentContext!, rootNavigator: true).pop();
      _showErrorDialog(context, "Erro ao carregar os dados.");
      return null;
    }
  }

  Future<String?> _showPopupMenu_Osnew(
      BuildContext context, String controller) async {
    final GlobalKey<State> _keyLoader = GlobalKey<State>();

    // Verifica a conexão com a internet
    var connectivityResult = await Connectivity().checkConnectivity();
    if (connectivityResult == ConnectivityResult.none) {
      _showErrorDialog(context, "Sem conexão com a internet.");
      return null;
    }

    // Exibe o diálogo de carregamento
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (BuildContext context) {
        return Dialog(
          key: _keyLoader,
          child: Container(
            height: 100,
            padding: const EdgeInsets.all(16),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: const [
                CircularProgressIndicator(),
                SizedBox(width: 20),
                Text('Carregando...'),
              ],
            ),
          ),
        );
      },
    );

    try {
      final List<Map<String, dynamic>> items = await fetchDaOs().timeout(
        const Duration(seconds: 18),
        onTimeout: () {
          throw TimeoutException("O tempo limite foi excedido.");
        },
      );

      Navigator.of(_keyLoader.currentContext!, rootNavigator: true)
          .pop(); // Fecha o diálogo de carregamento

      final selected = await showModalBottomSheet<String>(
        context: context,
        isScrollControlled: true,
        builder: (BuildContext context) {
          String searchText = "";
          return StatefulBuilder(
            builder: (context, setState) {
              final List<Map<String, dynamic>> filteredItems =
                  items.where((item) {
                final os = (item['Numero Os']?.toString() ?? "").toLowerCase();
                final emit =
                    (item['Emitente OS']?.toString() ?? "").toLowerCase();
                return os.contains(searchText) || emit.contains(searchText);
              }).toList();

              return SafeArea(
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    const Padding(
                      padding: EdgeInsets.all(16.0),
                      child: Text(
                        'Selecione a Ordem de Serviço:',
                        style: TextStyle(
                            fontSize: 18, fontWeight: FontWeight.bold),
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.symmetric(
                          horizontal: 16.0, vertical: 8.0),
                      child: TextField(
                        autofocus: true,
                        decoration: const InputDecoration(
                          hintText: "Pesquise por OS ou Emitente",
                          prefixIcon: Icon(Icons.search),
                          border: OutlineInputBorder(),
                        ),
                        onChanged: (value) {
                          setState(() {
                            searchText = value.toLowerCase();
                          });
                        },
                      ),
                    ),
                    Expanded(
                      child: ListView.builder(
                        shrinkWrap: true,
                        itemCount: filteredItems.length,
                        itemBuilder: (context, index) {
                          final item = filteredItems[index];
                          return ListTile(
                            title: Text(
                                '${item['Numero Os']} : ${item['Emitente OS']} - ${item['Data Emissao']}'),
                            onTap: () {
                              Navigator.of(context)
                                  .pop(item['Numero Os'].toString());
                            },
                          );
                        },
                      ),
                    ),
                  ],
                ),
              );
            },
          );
        },
      );

      if (selected != null) {
        controller = selected;
      }
      return selected;
    } on TimeoutException {
      Navigator.of(_keyLoader.currentContext!, rootNavigator: true).pop();
      _showErrorDialog(
          context, "O tempo limite foi excedido. Tente novamente.");
      return null;
    } catch (error) {
      Navigator.of(_keyLoader.currentContext!, rootNavigator: true).pop();
      _showErrorDialog(context, "Erro ao carregar os dados.");
      return null;
    }
  }

// Função para exibir mensagens de erro
  void _showErrorDialog(BuildContext context, String message) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Erro"),
          content: Text(message),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text("OK"),
            ),
          ],
        );
      },
    );
  }

  Uint8List? imageBytes;
  Future<void> pegarImagemGet() async {
    if (selectedcode == null) return;

    setState(() {
      isLoading2 = true;
      imageBytes = null;
      isImageAvailable = false;
    });

    // final String username = "IPENA";
    // final String password = "Nina@2010";SALDPR?page=1&limit=50
    final username = widget.user;
    final password = widget.senha;
    final String baseUrl = "http://192.168.0.6:80/REST/ipena_insol/mt010images";
    final String url = "$baseUrl?product=$selectedcode";

    String basicAuth =
        'Basic ' + base64Encode(utf8.encode('$username:$password'));

    try {
      final response = await http.get(
        Uri.parse(url),
        headers: {'Authorization': basicAuth},
      );

      if (response.statusCode == 200 && response.bodyBytes.isNotEmpty) {
        setState(() {
          imageBytes = response.bodyBytes;
          isImageAvailable = true;
        });
      } else {
        setState(() {
          imageBytes = null;
          isImageAvailable = false;
        });
      }
    } catch (e) {
      setState(() {
        imageBytes = null;
        isImageAvailable = false;
      });
      print('Erro: $e');
    } finally {
      setState(() {
        isLoading2 = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        automaticallyImplyLeading: false,
        title: const Text(
          'Solicitação de Produtos',
          style: TextStyle(
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
        backgroundColor: Colors.blueAccent,
        elevation: 4,
      ),
      body: isLoading
          ? Center(
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  CircularProgressIndicator(
                    color: Colors.blueAccent,
                    strokeWidth: 6.0,
                  ),
                  const SizedBox(height: 20),
                  const Text(
                    'Carregando...',
                    style: TextStyle(fontSize: 18, color: Colors.grey),
                  ),
                ],
              ),
            )
          : hasError
              ? Center(
                  child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Icon(Icons.error_outline,
                          size: 80, color: Colors.redAccent),
                      const SizedBox(height: 10),
                      const Text(
                        'Erro ao carregar dados.',
                        style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.redAccent),
                      ),
                      const SizedBox(height: 20),
                      ElevatedButton.icon(
                        onPressed: fetchData1,
                        icon: const Icon(Icons.refresh, color: Colors.white),
                        label: const Text('Tentar Novamente'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blueAccent,
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10)),
                          padding: const EdgeInsets.symmetric(
                              horizontal: 20, vertical: 10),
                        ),
                      ),
                      const SizedBox(height: 10),
                      ElevatedButton.icon(
                        onPressed: fetchDataof,
                        icon:
                            const Icon(Icons.offline_bolt, color: Colors.white),
                        label: const Text('Usar dados offline'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.green,
                          shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(10)),
                          padding: const EdgeInsets.symmetric(
                              horizontal: 20, vertical: 10),
                        ),
                      ),
                    ],
                  ),
                )
              : Padding(
                  padding: const EdgeInsets.all(12.0),
                  child: Column(
                    children: [
                      Expanded(
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            // Tabela de Dados ajustada com estilo mais moderno
                            Expanded(
                              flex: 3,
                              child: _buildStyledCard(
                                child: _buildDataRow1('Pesquisas'),
                              ),
                            ),
                            const SizedBox(width: 10),
                            // Linha 2 ajustada com estilo mais moderno
                            Expanded(
                              flex: 2,
                              child: _buildStyledCard(
                                child: _buildDataRow2('Itens Adicionados'),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
    );
  }
}

// Método para estilizar os cards de conteúdo
Widget _buildStyledCard({required Widget child}) {
  return Card(
    shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
    elevation: 6,
    margin: const EdgeInsets.symmetric(vertical: 10),
    child: Padding(
      padding: const EdgeInsets.all(10),
      child: child,
    ),
  );
}
